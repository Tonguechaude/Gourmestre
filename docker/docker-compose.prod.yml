services:
  # Database PostgreSQL
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-u_gourmestre}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-Gourmestre}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - gourmestre-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-u_gourmestre} -d ${DB_NAME:-Gourmestre}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Rust
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-u_gourmestre}:${DB_PASSWORD}@db:5432/${DB_NAME:-Gourmestre}
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-Gourmestre}
      DB_USER: ${DB_USER:-u_gourmestre}
      DB_PASSWORD: ${DB_PASSWORD}
      RUST_LOG: ${RUST_LOG:-info}
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gourmestre-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: https://gourmestre.tonguechaude.fr/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gourmestre-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  gourmestre-network:
    driver: bridge

volumes:
  pgdata: